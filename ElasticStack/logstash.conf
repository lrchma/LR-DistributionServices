input {
    tcp {
        port => 5514
        type => syslog
    }
    udp {
        port => 5514
        type => syslog
    }

    beats
    {
        ssl => false
        host => "0.0.0.0"
        port => 5044
    }
    gelf
    {
        host => "0.0.0.0"
        port => 12201
    }
    http
    {
        ssl => false
        host => "0.0.0.0"
        port => 8888
    }
    tcp
    {
        mode => "server"
        host => "0.0.0.0"
        port => 5010
    }
    udp
    {
        host => "0.0.0.0"
        port => 5000
    }
}


filter {

#LogRhythm Alarms CSV collected by Elastic Beats Agent
if [type] == "log" {
 csv {
  columns => ["AlarmID", "AlarmDate", "EventDate","EventCount","Direction","Classification","CommonEvent","RiskBasedPriority","SHostName","DHostName","Application","UserOriginIdentity","AlarmURL","Action","AlarmRuleDescription","AlarmRuleID","AlarmRuleName","Amount","Command","CVE","DomainImpacted","DomainOrigin","Duration","EntityNameImpacted","EntityNameOrigin","Group","Hash","HostImpactedKBytesReceived","HostImpactedKBytesSent","HostImpactedPacketsReceived","HostImpactedPacketsSent","InterfaceImpacted","InterfaceOrigin","LocationImpacted","LocationOrigin","RawLog","LogSourceInformation","MACAddressImpacted","MACAddressOrigin","MPERuleName","NATIPAddressImpacted","NATIPAddressOrigin","DNATPort","SNATPort","NetworkImpacted","NetworkOrigin","Object","ObjectName","ObjectType","ParentProcessID","ParentProcessName","ParentProcessPath","Policy","ProcessID","ProcessName","Protocol","Quantity","Rate","Reason","Recipient","RecipientIdentityID","ResponseCode","Result","Sender","SenderIdentityID","SerialNumber","Session","SessionType","Severity","Size","Status","Subject","TCPUDPPortImpacted","TCPUDPPortOrigin","ThreatID","ThreatName","URL","UserImpacted","UserImpactedIdentityID","UserOriginIdentityID","UserAgent","VendorInfo","VendorMessageID","Version","ZoneImpacted","ZoneOrigin"]
  separator => ","
  }
  
   #Optional - apply Geo and ASN enrichment via GeoLite databases  
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-City.mmdb"
      source => "SHostName"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-ASN.mmdb"
      source => "SHostName"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-City.mmdb"
      source => "DHostName"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-ASN.mmdb"
      source => "DHostName"
      target => "geoip"
    }
 }

#LogRhythm LDS
if [type] == "syslog" {

grok {
 match => { "message" => '^%{SYSLOG5424PRI}%{CISCOTIMESTAMP} %{IP:host}(/[^\s]+)? %{DATA:process}: %{GREEDYDATA:kvpairs} RawLog\=%{DATA:RawLog}$' }
 add_field => [ "received_at", "%{@timestamp}" ]
}

#fix LDS integer fields that include NaN
 mutate {
  gsub => [ "kvpairs", "NaN", "0" ]
 }

 #additional trim_values is for values that include speech marks, such as MS Sysmon
 kv{
  source => "kvpairs"
  trim_value => "\""
  field_split => " "
  value_split => "="
 }

   #we dont need retain the original message nor kvpairs fields
   prune {
    blacklist_names => [ "message" ]
    blacklist_names => [ "kvpairs" ]
   }

   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-City.mmdb"
      source => "SIP"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-ASN.mmdb"
      source => "SIP"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-City.mmdb"
      source => "DIP"
      target => "geoip"
    }
   geoip {
      database => "/opt/bitnami/logstash/GeoLite2-ASN.mmdb"
      source => "DIP"
      target => "geoip"
    }

    translate {
      field => "MsgClassID"
      destination => "ClassificationName"
      dictionary_path => "/opt/bitnami/logstash/lr-msgclassid.yaml"
    }
    
	#optional dictionary lookups to denormalise LogRhythm metadata over LDS
    translate {
      field => "EntityId"
      destination => "EntityName"
      dictionary_path => "/opt/bitnami/logstash/lr-entity.yaml"
      refresh_interval => 300
    }
    translate {
      field => "MsgSourceID"
      destination => "LogSourceName"
      dictionary_path => "/opt/bitnami/logstash/lr-msgsourceid.yaml"
      refresh_interval => 300
    }
    translate {
      field => "Direction"
      destination => "DirectionName"
      dictionary_path => "/opt/bitnami/logstash/lr-direction.yaml"
    }
    translate {
      field => "ProtocolID"
      destination => "ProtocolName"
      dictionary_path => "/opt/bitnami/logstash/lr-protocols.yaml"
    }

    translate {
      field => "CommonEventID"
      destination => "CommonEventName"
      dictionary_path => "/opt/bitnami/logstash/lr-commonevents.yaml"
    }

    translate {
      field => "syslog5424_pri"
      destination => "SyslogPriority"
      dictionary_path => "/opt/bitnami/logstash/lr-syslog.yaml"
    }


  }


}

output
{

   if [type] == "log" {
        elasticsearch
         {
            hosts => ["127.0.0.1:9200"]
            index => "lr-alarms-%{+YYYY.MM.dd}"
         }
   }
   if [type] == "syslog" {
         elasticsearch
          {
           hosts => ["127.0.0.1:9200"]
           index => "lr-lds-active-%{+YYYY.MM.dd}"
          }
   }

    stdout { codec => rubydebug }

}
